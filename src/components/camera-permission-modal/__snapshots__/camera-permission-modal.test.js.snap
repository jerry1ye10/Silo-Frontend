// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CameraPermissionModal /> modal visibility 1 1`] = `
<Modal
  animationType="none"
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  testID="modal"
  transparent={true}
  visible={true}
>
  <View
    accessible={true}
    clickable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "black",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          },
          Object {
            "flex": 1,
            "justifyContent": "center",
          },
          undefined,
          Object {
            "margin": 0,
          },
        ],
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 1334,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      testID="modal"
    >
      <View
        onLayout={[Function]}
        pointerEvents="box-none"
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "paddingBottom": 0,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 20,
          }
        }
        testID="container"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#f8f8f8",
              "borderRadius": 2,
              "height": 250,
              "overflow": "hidden",
              "paddingHorizontal": 10,
              "paddingVertical": 20,
              "width": 300,
            }
          }
          testID="modal-view"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "space-between",
                "width": "100%",
              }
            }
          >
            <Text
              style={
                Object {
                  "fontSize": 20,
                  "fontWeight": "bold",
                }
              }
            >
              Enable Camera
            </Text>
            <Text
              style={
                Object {
                  "textAlign": "center",
                }
              }
            >
              Labyrinthe needs access to your
              

              camera to unlock desks in store.
            </Text>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "width": "100%",
                }
              }
            >
              <View
                accessible={true}
                clickable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "backgroundColor": "green",
                    "borderRadius": 2,
                    "margin": 5,
                    "opacity": 1,
                    "paddingVertical": 10,
                    "width": "90%",
                  }
                }
                testID="settings-button"
              >
                <Text
                  style={
                    Object {
                      "color": "white",
                      "fontWeight": "bold",
                      "textAlign": "center",
                    }
                  }
                >
                  SETTINGS
                </Text>
              </View>
              <View
                accessible={true}
                clickable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "margin": 5,
                    "opacity": 1,
                    "paddingVertical": 10,
                    "width": "90%",
                  }
                }
                testID="cancel-button"
              >
                <Text
                  style={
                    Object {
                      "color": "red",
                      "fontWeight": "bold",
                      "textAlign": "center",
                    }
                  }
                >
                  CANCEL
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</Modal>
`;

exports[`<CameraPermissionModal /> modal visibility 2 1`] = `
<Modal
  animationType="none"
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  testID="modal"
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    clickable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "black",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Array [
          Object {
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          },
          Object {
            "flex": 1,
            "justifyContent": "center",
          },
          undefined,
          Object {
            "margin": 0,
          },
        ],
        Object {
          "paddingBottom": 0,
        },
      ]
    }
  >
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      testID="modal"
    >
      <View
        onLayout={[Function]}
        pointerEvents="box-none"
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
            "paddingBottom": 0,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 20,
          }
        }
        testID="container"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#f8f8f8",
              "borderRadius": 2,
              "height": 250,
              "overflow": "hidden",
              "paddingHorizontal": 10,
              "paddingVertical": 20,
              "width": 300,
            }
          }
          testID="modal-view"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "space-between",
                "width": "100%",
              }
            }
          >
            <Text
              style={
                Object {
                  "fontSize": 20,
                  "fontWeight": "bold",
                }
              }
            >
              Enable Camera
            </Text>
            <Text
              style={
                Object {
                  "textAlign": "center",
                }
              }
            >
              Labyrinthe needs access to your
              

              camera to unlock desks in store.
            </Text>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "width": "100%",
                }
              }
            >
              <View
                accessible={true}
                clickable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "backgroundColor": "green",
                    "borderRadius": 2,
                    "margin": 5,
                    "opacity": 1,
                    "paddingVertical": 10,
                    "width": "90%",
                  }
                }
                testID="settings-button"
              >
                <Text
                  style={
                    Object {
                      "color": "white",
                      "fontWeight": "bold",
                      "textAlign": "center",
                    }
                  }
                >
                  SETTINGS
                </Text>
              </View>
              <View
                accessible={true}
                clickable={true}
                isTVSelectable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "margin": 5,
                    "opacity": 1,
                    "paddingVertical": 10,
                    "width": "90%",
                  }
                }
                testID="cancel-button"
              >
                <Text
                  style={
                    Object {
                      "color": "red",
                      "fontWeight": "bold",
                      "textAlign": "center",
                    }
                  }
                >
                  CANCEL
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</Modal>
`;
